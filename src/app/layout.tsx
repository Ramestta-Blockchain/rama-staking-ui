"use client"
// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
// import { headers } from 'next/headers'
import { State, cookieToInitialState } from 'wagmi'

import { config } from '@/configs'
import { Providers } from '@/configs/providers'
import { CssBaseline, PaletteMode } from "@mui/material";
import createTheme from "@mui/material/styles/createTheme";
import { ThemeProvider } from "@mui/material/styles";
import React, { useEffect } from "react";



const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Ramestta Staking",
//   description: "Generated by create next app",
// };


// Define types for your custom palettes
interface CustomPalette {
  main: string;
  contrastText: string;

  // You can add more colors here as needed
}

// Define types for light and dark palettes
interface LightPalette extends CustomPalette {
  primary: any;
  secondary: any;
  background: any;
  button: any;
  text: any;
  common: any;
  success: any;
  info: any;
  warning: any;

}

interface DarkPalette extends CustomPalette {
  primary: any;
  secondary: any;
  background: any;
  button: any;
  text: any;
  common: any;
  success: any;
  info: any;
  warning: any;
  // Define additional dark mode colors here if needed
}

// Define custom palettes for light and dark modes
const lightPalette: LightPalette = {
  primary: {
    main: '#fff',
    contrastText: '#000',
    light: '#d1d1d1'
  },
  secondary: {
    main: '#E3E1EB',
    contrastText: '#fff',
    light: '#F3F0FB'
  },
  background: {
    paper: "#fff",
    default: '#E3E1EB',
  },

  text: {
    primary: '#000'
  },
  common: {
    black: '1px solid #D4D3DB',
    white: '#EBEBEB'
  },
  success: {
    main: '#BBD7D0',
    contrastText: '#45B780',
  },

  info: {
    main: '#fff',
    contrastText: '1px solid #EBEBEB',
  },

  warning: {
    main: '#fff',
    contrastText: '1px solid #EBEBEB'
  },
  button: undefined,
  main: "#E3E1EB",
  contrastText: ""
};

const darkPalette: DarkPalette = {
  primary: {
    main: '#2A2A30',
    contrastText: '#fff',
    light: '#2A2A30'
  },
  secondary: {
    main: '#1C1C20',
    contrastText: '#000',
    light: '#1C1C20'
  },
  background: {
    paper: '#141416',
    default: '#2A2A30'
  },


  text: {
    primary: '#fff',
  },
  common: {
    black: '1px solid #27272B',
    white: '#EBEBEB'
  },
  success: {
    main: '#264338',
    contrastText: '#45B780',
  },

  info: {
    main: '#1C1C20',
    contrastText: '1px solid #1C1C20',
  },

  warning: {
    main: '#1C1C20',
    contrastText: '1px solid #fff0'
  }
  // Add more colors for dark mode if needed
  ,
  button: undefined,
  main: "#000",
  contrastText: ""
};

export const ColorModeContext = React.createContext({ toggleColorMode: () => { } });

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const initialState = cookieToInitialState(
    config,
    // headers().get('cookie')
  ) as State

  const getInitialMode = () => {
    // Check if mode is saved in localStorage
    const savedMode = localStorage.getItem('colorMode');
    // If mode is saved, return saved mode, otherwise return 'light' as default
    return savedMode ? (savedMode as PaletteMode) : 'light';
  }

  const [mode, setMode] = React.useState<PaletteMode>(getInitialMode);

  useEffect(() => {
    // Save mode preference to localStorage whenever it changes
    localStorage.setItem('colorMode', mode);
  }, [mode]);

  const getDesignTokens = (mode: PaletteMode) => ({
    palette: {
      mode,
      ...(mode === 'dark'
        ? {
          ...lightPalette, // palette values for light mode

        }
        : {
          // palette values for dark mode
          ...darkPalette,
        }),
    },
  });




  // const [mode, setMode] = React.useState<PaletteMode>('light');



  const colorMode = React.useMemo(
    () => ({
      // The dark mode switch would invoke this method
      toggleColorMode: () => {
        setMode((prevMode: PaletteMode) =>
          prevMode === 'light' ? 'dark' : 'light',
        );
      },
    }),
    [],
  );

  // Update the theme only if the mode changes
  const theme = React.useMemo(() => createTheme(getDesignTokens(mode)), [mode]);

  return (
    <html lang="en">
      <body className={inter.className}>
        
        <Providers initialState={initialState}>
          <ColorModeContext.Provider value={colorMode}>
            <ThemeProvider theme={theme}>
              <CssBaseline />
              {children}
            </ThemeProvider>
          </ColorModeContext.Provider>
        </Providers>
      </body>
    </html>
  );
}

